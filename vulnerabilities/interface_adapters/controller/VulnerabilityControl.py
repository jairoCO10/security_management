from vulnerabilities.interface_adapters.gateways.VulnerabilityGateways import VulnerabilityGateway
from vulnerabilities.usecases.VulnerabilityCases import VulnerabilityUseCase
from django.http import Http404

class ControlVulnerability:

    def __init__(self) -> None:
        self.vulnerability_gateway = VulnerabilityGateway()
        self.vulnerability_usecase = VulnerabilityUseCase(self.vulnerability_gateway)

    
    def get_all_vulnerability(self):
        response =  self.vulnerability_usecase.get_vulnerabilitys()
        if response:
            return response
        else:
            raise Http404("No vulnerabilities found.")

        



    async def agg_vulnerability(self, item:dict):
    

        cve_id = item["id"]
        source_identifier = item["sourceIdentifier"]
        published = item["published"]
        last_modified  = item["lastModified"]
        vuln_status  = item["vulnStatus"]
        descriptions = item.get('descriptions', [])
        description_en = next((desc['value'] for desc in descriptions if desc['lang'] == 'en'), '')
        description_es = next((desc['value'] for desc in descriptions if desc['lang'] == 'es'), '')

        metrics = item.get('metrics.cvssMetricV2', None)
        severity = "UNKNOWN"

        if metrics:
            severity = next((metric['baseSeverity'] for metric in metrics if metric.get('baseSeverity')), "UNKNOWN")

        impactScore = item.get('metrics.cvssMetricV2', None)
        if impactScore:
            impact_score = next((metric['impactScore'] for metric in metrics if metric.get('impactScore')), "UNKNOWN")


        base_score = item["sourceIdentifier"]
        exploitability_score  = item["sourceIdentifier"]

        return await  self.vulnerability_usecase.create_vulnerability(cve_id, source_identifier, published, last_modified, vuln_status, 
                                                    description_en, description_es, severity, base_score, exploitability_score,
                                                    impact_score)




from django.shortcuts import render

# Create your views here.
from rest_framework.response import Response
from rest_framework.exceptions import NotFound
from django.http import Http404
from rest_framework import status
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi


from rest_framework.decorators import api_view




from fixedVulnerability.serializers.serializers import FixedVulnerabilityClassSerializer
from fixedVulnerability.interface_adapters.controller.FixedControl import ControlFixed

import logging
from logging.handlers import TimedRotatingFileHandler
from fixedVulnerability.interface_adapters.dependencies import openapidoc


log_formatter = logging.Formatter('%(asctime)s [%(levelname)s] - %(message)s')
log_handler = TimedRotatingFileHandler(
    filename='logs/fixed/fixed.log',  # Ruta y nombre del archivo de registro
    when='D',  # Cambiar archivos diariamente
    interval=1,  # Cantidad de días antes de cambiar el archivo
)
log_handler.setFormatter(log_formatter)

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.addHandler(log_handler)





@swagger_auto_schema(
    method='post',
    request_body=openapidoc.create_fixed_request_body, 
    responses=openapidoc.create_fixed_responses,
)

@api_view(['POST'])
def create_fixed(request):
    # Serializa los datos entrantes
    fixed = ControlFixed()
    serializer = FixedVulnerabilityClassSerializer(data=request.data)

    # Valida los datos
    if serializer.is_valid():
        # Procesa los datos si son válidos
        cve_id = serializer.validated_data["cve_id"]
        fixed_instance = fixed.create_fixed(cve_id)
        fixed_serializer = FixedVulnerabilityClassSerializer(fixed_instance)
        logger.info(f"Solicitud a la ruta /create_fixed.\n"
                f"Data enviada: {cve_id}\n")
        return Response(fixed_serializer.data, status=status.HTTP_201_CREATED)
    
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


# Define the example response


@swagger_auto_schema(
    method='get',
    responses=openapidoc.responses,
    
)
@api_view(['GET'])
def get_all_fixed(request):
    fixed = ControlFixed()
    try:

       fixed = fixed.get_all_fixed()

       serializer = FixedVulnerabilityClassSerializer(fixed, many=True)
       logger.info("Solicitud a la ruta /get_all_fixed.\n")
       return Response(serializer.data)

    except Http404:
        raise NotFound("No vulnerabilities found.")


    